plugins {
  // To create a fat jar build/libs/bibtex-clean-all.jar, run: ./gradlew shadowJar
  id "com.github.johnrengelman.shadow" version "4.0.2"

  // Run the Error Prone linter.
  id "net.ltgt.errorprone-base" version "0.0.16"
  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.4.2' apply false

  // Formatting is disabled due to poor handling of type annotations; wait until
  // this issue is fixed: https://github.com/google/google-java-format/issues/5
  // // Code formatting with Google Java Format; defines targets "goJF" and "verJF".
  // id "com.github.sherter.google-java-format" version "0.7.1"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// Checker Framework pluggable type-checking
apply plugin: 'org.checkerframework'
checkerFramework {
  checkers = [
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.signature.SignatureChecker'
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions'
  ]
}

// To use a local-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
    checkerFrameworkAnnotatedJDK files(cfHome + "/checker/dist/jdk8.jar")
  }
}

// Run: gradle check
apply plugin: 'checkstyle'

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    implementation 'org.plumelib:options:1.0.2'
    implementation 'org.plumelib:plume-util:1.0.10'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    errorprone 'com.google.errorprone:error_prone_core:2.3.3'
}

// Define the main class for the application
mainClassName = 'org.plumelib.bibtex.BibtexClean'

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
}

dependencies {
  compileOnly group: 'org.plumelib', name: 'require-javadoc', version: '0.1.2'
}
task requireJavadoc(type: Javadoc) {
  description = 'Ensures that Javadoc documentation exists.'
  destinationDir.deleteDir()
  source = sourceSets.main.allJava
  classpath = project.sourceSets.main.compileClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.compileClasspath as List
  options.doclet = "org.plumelib.javadoc.RequireJavadoc"
}

checkstyle {
    toolVersion = "8.11"
    ignoreFailures = false
//    configFile = file("${project.rootDir}/checkstyle.xml")
}

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
